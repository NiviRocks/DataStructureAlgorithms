'''
This in-place sorting algorithm works with Complexity O(n + r).

Consider list L with n integers from range [0,r) that is, 0 <= i < r .
Where, i are the elements in list L.
Such that n>>r. 
'''
# CODE
def sortInRange(L,r):
    dict={}
    for i in range(r): # O(r)
        dict[i]=0
        
    for ele in L: # O(n)
        dict[ele]+=1
    i=0
    front=0
    while i < r: # O(r)
        back=dict[i]
        L[front:back]=[i]*dict[i]
        front=back
        i+=1
#__main__
L1=list(eval(input("Enter List of numbers:")))
sortInRange(L1)
print(L1)

'''
INPUT_1:
2,0,1,1,2,3,0,2,1,0,2,3,1,2
OUTPUT_1:
[0,0,0,1,1,1,1,2,2,2,2,2,3,3]

INPUT_2:
8,2,7,7,2,2,0,7,4,7,0,0,8,6,0,0,4,8,1,8,0,0,8,3,5,9,7,7,9,3,1,0,6,0,8,3,9,6,1,0,5,0,7,2,1,9,9,4,5,2,4,2,8,1,3,3,5,4,8,3,4,2,5,8,5,1,8,2,3,3,6,4,2,4,0,9,9,4,9,5,9,2,2,6,9,8,3,0,4,2,4,0,0,1,1,3,6,5,0,9,5,9,4,5,6,2,7,5,3,4,7,7,0,8,6,2,9,1,5,6,3,5,5,2,7,0,2,5,1,6,0,4,0,4,9,0,7,7,7,3,5,4,0,3,0,6,9,6,2,6,2,6,4,3,1,5,3,3,9,3,5,1,7,8,5,8,3,2,8,1,1,8,5,8,2,6,5,2,8,1,2,8,2,4,1,3,2,7,3,5,4,3,5,9,8,1,6,0,2,3,7,1,9,4,4,1,3,8,7,9,0,2,7,5,5,2,4,4,4,6,4,0,6,7,7,2,7,9,5,5
OUTPUT_2:
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
'''
